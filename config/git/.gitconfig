# https://gist.githubusercontent.com/tdd/470582/raw/7f20c0e41426270ffecbccb188ebdca5e4ff2e66/gitconfig.ini
# Put this in your ~/.gitconfig or ~/.config/git/config
[user]
	name = Guillaume Astier
	email = astier.gui@gmail.com
	signingkey = BBAB76C9B79748E1D40EAD9CD6756C102DFDF2A8
[commit]
	gpgsign = true
[color]
	ui = auto
	excludesFile = ~/.gitignore
[alias]
	aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
	# Command shortcuts
	st = status
	co = checkout
	ci = commit
	lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
	oops = commit --amend --no-edit
	review-local = "!git lg @{push}.."
	rl = reflog show HEAD -30
	push-with-lease = push --force-with-lease
	rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
	reword = commit --amend
	uncommit = reset --soft HEAD~1
	untrack = rm --cache --
[core]
	autocrlf = input
	pager = cat
	#
	# Out of luck: on Windows w/o msysGit? You may have Notepad++…
	# editor = 'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin
	#
	# If you want to use Sublime Text 2's subl wrapper:
	# editor = subl -w
	#
	# Or Atom, perhaps:
	editor = /usr/bin/vim
	#
	# Sublime Text 2 on Windows:
	# editor = 'c:/Program Files (x86)/Sublime Text 2/sublime_text.exe' -w
	#
	# Sublime Text 3 on Windows:
	# editor = 'c:/Program Files/Sublime Text 3/subl.exe' -w
	#
	# Don't consider trailing space change as a cause for merge conflicts
	whitespace = -trailing-space
[diff]
	# Use better, descriptive initials (c, i, w) instead of a/b.
	mnemonicPrefix = true
	# Show renames/moves as such
	renames = true
	# When using --word-diff, assume --word-diff-regex=.
	wordRegex = .
	# Display submodule-related information (commit listings)
	submodule = log
	# Use VSCode as default diff tool when running `git diff-tool`
	tool = vscode
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
[fetch]
	# Auto-fetch submodule changes (sadly, won't auto-update)
	recurseSubmodules = on-demand
[grep]
	break = true
	heading = true
	lineNumber = true
	# Consider most regexes to be ERE
	extendedRegexp = true
[log]
	# Use abbrev SHAs whenever possible/relevant instead of full 40 chars
	abbrevCommit = true
	# Automatically --follow when given a single path
	follow = true
	# Disable decorate for reflog
	# (because there is no dedicated `reflog` section available)
	decorate = false
[merge]
	# Display common-ancestor blocks in conflict hunks
	# conflictStyle = diff3
	# Disable fast-forward merges as default merge strategy.
	# Force explicit call of `git merge --ff …`.
	ff = false
	# Custom/dedicated merge drive for npm lock files (`package-lock.json`).
	# Also works with Yarn.
	# Use Git attributes to set targeted files (located at `~/.config/git/attributes``
	# when installed with npm).
	# See https://www.npmjs.com/package/npm-merge-driver
	# [merge "npm-merge-driver"]
	# name = automatically merge npm lockfiles
	# driver = npx npm-merge-driver merge %A %O %B %P
[mergetool]
	# Clean up backup files created by merge tools on tool exit
	keepBackup = false
	# Clean up temp files created by merge tools on tool exit
	keepTemporaries = false
	# Put the temp files in a dedicated dir anyway
	writeToTemp = true
	# Auto-accept file prompts when launching merge tools
	prompt = false
[page]
	# Use custom pager to get an better log on terminal.
	# As this is an external tool it has to be installed.
	# See https://github.com/so-fancy/diff-so-fancy
	# show = diff-so-fancy | less --tabs=4 -RFX
[pull]
	# This is GREAT… when you know what you're doing and are careful
	# not to pull --no-rebase over a local line containing a true merge.
	# rebase = true
	# This option, which does away with the one gotcha of
	# auto-rebasing on pulls, is only available from 1.8.5 onwards.
	# rebase = preserve
	# WARNING! This option, which is the latest variation, is only
	# available from 2.18 onwards.
	rebase = merges
[push]
	# Default push should only push the current branch to its push target, regardless of its remote name
	default = upstream
	# When pushing, also push tags whose commit-ishs are now reachable upstream
	followTags = true
[rebase]
	# Rebase advanced usage.
	# Automagically reorder and prefix your commands while doing an interactive
	# rebase. This has to be used with `--fixup` and/or `--squash` options for
	# `git commit`.
	# autoSquash = true
	# Automatically stash current WD and stage when running rebase
	# then you won't have to manually `git stash push` and `git stash pop`
	# after and before your rebase.
	# autoStash = true
[rerere]
	# If, like me, you like rerere, uncomment these
	# autoupdate = true
	# enabled = true
[status]
	# Display submodule rev change summaries in status
	submoduleSummary = true
	# Recursively traverse untracked directories to display all contents
	showUntrackedFiles = all
[color "branch"]
	# Blue on black is hard to read in git branch -vv: use cyan instead
	upstream = cyan
[tag]
	# Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
	sort = version:refname
[versionsort]
	prereleaseSuffix = -pre
	prereleaseSuffix = .pre
	prereleaseSuffix = -beta
	prereleaseSuffix = .beta
	prereleaseSuffix = -rc
	prereleaseSuffix = .rc
[init]
	defaultBranch = main

